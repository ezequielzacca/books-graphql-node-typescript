"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_server_express_1 = require("apollo-server-express");
exports.typeDefs = apollo_server_express_1.gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  # Comments in GraphQL are defined with the hash (#) symbol.\n\n  # This \"Book\" type can be used in other type declarations.\n  type Book {\n    id: ID!\n    title: String!\n    authorId: ID!\n    author: Author!\n    genreId: ID!\n    genre: Genre!\n  }\n\n  type Genre {\n    id: ID!\n    name: String!\n    books: [Book!]!\n    numberOfBooks: Int!\n  }\n\n  type Author {\n    id: ID!\n    name: String!\n    books: [Book!]!\n    numberOfBooks: Int!\n  }\n\n\n  input BookInput {\n    title: String!\n    genreId: ID!\n    authorId: ID!\n  }\n\n  input GenreInput {\n    name: String!\n  }\n\n  input AuthorInput {\n    name: String!\n  }\n\n  # The \"Query\" type is the root of all GraphQL queries.\n  # (A \"Mutation\" type will be covered later on.)\n  type Query {\n    books: [Book]\n    booksWhereTitleContains(query:String!): [Book]\n    genres: [Genre]\n    authors: [Genre]\n  }\n\n  type Mutation {\n    createBook(book: BookInput): Book!\n    createGenre(genre: GenreInput): Genre!\n    createAuthor(author: AuthorInput): Author!\n  }\n"], ["\n  # Comments in GraphQL are defined with the hash (#) symbol.\n\n  # This \"Book\" type can be used in other type declarations.\n  type Book {\n    id: ID!\n    title: String!\n    authorId: ID!\n    author: Author!\n    genreId: ID!\n    genre: Genre!\n  }\n\n  type Genre {\n    id: ID!\n    name: String!\n    books: [Book!]!\n    numberOfBooks: Int!\n  }\n\n  type Author {\n    id: ID!\n    name: String!\n    books: [Book!]!\n    numberOfBooks: Int!\n  }\n\n\n  input BookInput {\n    title: String!\n    genreId: ID!\n    authorId: ID!\n  }\n\n  input GenreInput {\n    name: String!\n  }\n\n  input AuthorInput {\n    name: String!\n  }\n\n  # The \"Query\" type is the root of all GraphQL queries.\n  # (A \"Mutation\" type will be covered later on.)\n  type Query {\n    books: [Book]\n    booksWhereTitleContains(query:String!): [Book]\n    genres: [Genre]\n    authors: [Genre]\n  }\n\n  type Mutation {\n    createBook(book: BookInput): Book!\n    createGenre(genre: GenreInput): Genre!\n    createAuthor(author: AuthorInput): Author!\n  }\n"])));
var templateObject_1;
